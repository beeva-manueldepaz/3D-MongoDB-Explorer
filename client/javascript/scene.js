//// Generated by CoffeeScript 1.7.1
//(function() {
//  var cube, cube2, geometry, light1, light2, lightVisualizer, material, paused, render, renderer;
//
//  paused = false;
//

var pintaColecciones,grupo,pintaNodos,grupoNodos;

var coleccion_elegida=false;

  window.scope = {
    x: 0,
    y: 0,
    color: 0x0000ff,
    light1position: new THREE.Vector3(1, 1, 1),
    pause: function() {
      return paused = !paused;
    },
    rate: 1
  };

function pintaColeccion(colec){
  if(colec===coleccion_elegida) return;
  coleccion_elegida=colec;
  $.get('http://localhost:3000/test/'+colec).then(function(data){
    pintaNodos(data);
  },function(){

  });
}

window.eventea = function(){
  var vector = new THREE.Vector3( scope.light1position.x, scope.light1position.y, 0 );

  var raycaster = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );

  var intersects = raycaster.intersectObjects( objects );

  if ( intersects.length > 0 ) {
    pintaColeccion(intersects[0].object.name);
    ////controls.enabled = false;
    //
    //SELECTED = intersects[ 0 ].object;
    //
    //var intersects = raycaster.intersectObject( plane );
    //offset.copy( intersects[ 0 ].point ).sub( plane.position );
    //
    //container.style.cursor = 'move';

  }
};
//
//  window.scene = new THREE.Scene();
//
//  window.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
//
//  renderer = new THREE.WebGLRenderer({
//    antialias: true
//  });
//
//  renderer.setSize(window.innerWidth, window.innerHeight);
//
//  renderer.shadowMapEnabled = true;
//
//  document.body.appendChild(renderer.domElement);
//
//
//  lightVisualizer = new THREE.Mesh(new THREE.SphereGeometry(0.2), new THREE.MeshBasicMaterial(0x555555));
//
//  lightVisualizer.position = scope.light1position;
//
//  scene.add(lightVisualizer);
//
//  camera.position.fromArray([0, 3, 10]);
//
//  camera.lookAt(new THREE.Vector3(0, 0, 0));
//
//  light1 = new THREE.DirectionalLight(0xffffff, 3.5, 10);
//
//  light1.castShadow = true;
//
//  light1.position = scope.light1position;
//
//  scene.add(light1);
//
//  light2 = new THREE.DirectionalLight(0xffffff, 0.5);
//
//  light2.position.set(0, -1, 0);
//
//  scene.add(light2);
//
//  render = function() {
//    if (!paused) {
//      window.scope.x += scope.rate * 0.004;
//      window.scope.y += scope.rate * 0.002;
//    }
//    renderer.render(scene, camera);
//    return requestAnimationFrame(render);
//  };
//
//  render();
//
//}).call(this);



var container, stats;
var camera, controls, scene, renderer;
var objects = [], plane;

var raycaster = new THREE.Raycaster();
var mouse = new THREE.Vector2(),
        offset = new THREE.Vector3(),
        INTERSECTED, SELECTED;

init();
animate();

function init() {

  container = document.createElement( 'div' );
  document.body.appendChild( container );

  camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );
  camera.position.z = 1000;

  //controls = new THREE.TrackballControls( camera );
  //controls.rotateSpeed = 1.0;
  //controls.zoomSpeed = 1.2;
  //controls.panSpeed = 0.8;
  //controls.noZoom = false;
  //controls.noPan = false;
  //controls.staticMoving = true;
  //controls.dynamicDampingFactor = 0.3;

  scene = new THREE.Scene();

  scene.add( new THREE.AmbientLight( 0x505050 ) );

  //var light = new THREE.SpotLight( 0xffffff, 1.5 );
  //light.position.set( 0, 0, 0 );
  ////light.castShadow = true;
  ////
  ////light.shadowCameraNear = 200;
  ////light.shadowCameraFar = camera.far;
  ////light.shadowCameraFov = 50;
  ////
  ////light.shadowBias = -0.00022;
  ////light.shadowDarkness = 0.5;
  ////
  ////light.shadowMapWidth = 2048;
  ////light.shadowMapHeight = 2048;
  //
  //scene.add( light );


  var geometry = new THREE.BoxGeometry( 15,15,40 );
  var object = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0xF00000 } ) );
  object.position = scope.light1position;
  scene.add( object );



  // var geometry = new THREE.BoxGeometry( 40, 40, 40 );
  //
  // for ( var i = 0; i < 200; i ++ ) {
  //
  // 	var object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } ) );
  //
  // 	object.position.x = Math.random() * 1000 - 500;
  // 	object.position.y = Math.random() * 600 - 300;
  // 	object.position.z = Math.random() * 800 - 400;
  //
  // 	object.rotation.x = Math.random() * 2 * Math.PI;
  // 	object.rotation.y = Math.random() * 2 * Math.PI;
  // 	object.rotation.z = Math.random() * 2 * Math.PI;
  //
  // 	object.scale.x = Math.random() * 2 + 1;
  // 	object.scale.y = Math.random() * 2 + 1;
  // 	object.scale.z = Math.random() * 2 + 1;
  //
  // 	object.castShadow = true;
  // 	object.receiveShadow = true;
  //
  // 	scene.add( object );
  //
  // 	objects.push( object );
  //
  // }
  var tam =10;
  var initialY = +250;
  grupo = new THREE.Object3D();
  grupoNodos = new THREE.Object3D();
  scene.add(grupo);
  scene.add(grupoNodos);

  grupo.position.x=-750;
  grupoNodos.position.x=0;

  renderer = new THREE.WebGLRenderer( { antialias: true } );
  renderer.setClearColor( 0xf0f0f0 );
  renderer.setSize( window.innerWidth, window.innerHeight );
  renderer.sortObjects = false;

  //renderer.shadowMapEnabled = true;
  //renderer.shadowMapType = THREE.PCFShadowMap;

  container.appendChild( renderer.domElement );


  //renderer.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );
  //renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );
  //renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUp, false );

  //

  window.addEventListener( 'resize', onWindowResize, false );

}

function onWindowResize() {

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize( window.innerWidth, window.innerHeight );

}

pintaColecciones = function(data){
  var initialY = 1-100;
  data.forEach(function(el,i){
    if(el==='system.indexes') return;
    var geometry = new THREE.BoxGeometry(600 ,100, 10 );
    var object = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } ) );
    object.position.x = 0;
    object.name = el;
    object.position.y = i*100-initialY+100;
    object.add(createText(el,30,10));
    grupo.add( object );
    objects.push(object);
  });
};

pintaNodos = function(data){
  var initialY = 1-100;
  if(grupoNodos.children) scene.remove(grupoNodos);
  grupoNodos = new THREE.Object3D();
  scene.add(grupoNodos);
  grupoNodos.position.x=0;
  data.forEach(function(el,i){
    delete el._id;
    var geometry = new THREE.BoxGeometry(900 ,100, 10 );
    var object = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } ) );
    object.position.x = 50;
    object.position.y = i*100-initialY;
    object.add(createText(JSON.stringify(el),30,10));
    grupoNodos.add(object);
  });
};


function createText(text,size,height) {
  var curveSegments = 4,

          bevelThickness = 2,
          bevelSize = 1.5,
          bevelSegments = 3,
          bevelEnabled = true,

          font = "optimer", // helvetiker, optimer, gentilis, droid sans, droid serif
          weight = "normal", // normal bold
          style = "normal"; // normal italic
  var textGeo = new THREE.TextGeometry( text, {

    size: size,
    height: height,
    //curveSegments: curveSegments,

    font: font,
    weight: weight,
    style: style,

    //bevelThickness: bevelThickness,
    //bevelSize: bevelSize,
    //bevelEnabled: bevelEnabled,

    //material: 0,
    //extrudeMaterial: 1

  });



  textMesh1 = new THREE.Mesh( textGeo, new THREE.MeshBasicMaterial({color : new THREE.Color("#000000")}) );

  textMesh1.position.x = -200;
  textMesh1.position.y = 0;
  textMesh1.position.z = 0;
  return textMesh1;

}



function onDocumentMouseMove( event ) {

  //event.preventDefault();
  //
  //mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
  //mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
  //
  ////
  //
  ////raycaster.setFromCamera( mouse, camera );
  //
  //if ( SELECTED ) {
  //
  //  var intersects = raycaster.intersectObject( plane );
  //  SELECTED.position.copy( intersects[ 0 ].point.sub( offset ) );
  //  return;
  //
  //}
  //
  //var intersects = raycaster.intersectObjects( objects );
  //
  //if ( intersects.length > 0 ) {
  //
  //  if ( INTERSECTED != intersects[ 0 ].object ) {
  //
  //    if ( INTERSECTED ) INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
  //
  //    INTERSECTED = intersects[ 0 ].object;
  //    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();
  //
  //    plane.position.copy( INTERSECTED.position );
  //    plane.lookAt( camera.position );
  //
  //  }
  //
  //  container.style.cursor = 'pointer';
  //
  //} else {
  //
  //  if ( INTERSECTED ) INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
  //
  //  INTERSECTED = null;
  //
  //  container.style.cursor = 'auto';
  //
  //}

}




function onDocumentMouseUp( event ) {

  event.preventDefault();

  //controls.enabled = true;

  if ( INTERSECTED ) {

    plane.position.copy( INTERSECTED.position );

    SELECTED = null;

  }

  container.style.cursor = 'auto';

}

//

function animate() {

  requestAnimationFrame( animate );

  render();

}

function render() {

  //controls.update();

  renderer.render( scene, camera );

}

$.get('http://localhost:3000/test').then(function(data){
  pintaColecciones(data);
},function(){

});